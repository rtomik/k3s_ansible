---
- name: Check if Prometheus Stack is already installed
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: prometheus-server
    namespace: monitoring
  register: prometheus_check
  ignore_errors: true

- name: Fetch Prometheus Stack Helm chart information
  kubernetes.core.helm_info:
    name: prometheus
    release_namespace: monitoring
  register: prometheus_helm_info
  ignore_errors: true

- name: Deploy or upgrade Prometheus Stack
  kubernetes.core.helm:
    name: prometheus
    chart_ref: prometheus-community/kube-prometheus-stack
    chart_version: "{{ prometheus_stack_version }}"
    release_namespace: monitoring
    create_namespace: yes
    values:
      grafana:
        ingress:
          enabled: true
          annotations:
            kubernetes.io/ingress.class: traefik
            traefik.ingress.kubernetes.io/router.tls.certresolver: le
          hosts:
            - grafana.{{ domain }}
          tls:
            - secretName: grafana-tls
              hosts:
                - grafana.{{ domain }}
        grafana.ini:
          auth.generic_oauth:
            enabled: true
            name: Authentik
            allow_sign_up: true
            client_id: "{{ grafana_oauth_client_id }}"
            client_secret: "{{ grafana_oauth_client_secret }}"
            scopes: openid profile email
            auth_url: https://auth.{{ domain }}/application/o/authorize/
            token_url: https://auth.{{ domain }}/application/o/token/
            api_url: https://auth.{{ domain }}/application/o/userinfo/
            role_attribute_path: contains(groups[*], 'Grafana Admins') && 'Admin' || contains(groups[*], 'Grafana Editors') && 'Editor' || 'Viewer'
      prometheus:
        ingress:
          enabled: true
          annotations:
            kubernetes.io/ingress.class: traefik
            traefik.ingress.kubernetes.io/router.tls.certresolver: le
          hosts:
            - prometheus.{{ domain }}
          tls:
            - secretName: prometheus-tls
              hosts:
                - prometheus.{{ domain }}
    wait: yes
    wait_timeout: 600
  when: >
    prometheus_check.resources | length == 0 or
    prometheus_helm_info.status is defined and
    prometheus_helm_info.status.chart_version is version(prometheus_stack_version, '<')
  register: prometheus_deploy

- name: Wait for Prometheus to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: monitoring
    label_selectors:
      - app=prometheus
  register: prometheus_pods
  until: >
    prometheus_pods.resources | length > 0 and
    (prometheus_pods.resources | map(attribute='status.phase') | list | unique == ['Running'])
  retries: 30
  delay: 10
  when: prometheus_deploy is changed

- name: Wait for Grafana to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: monitoring
    label_selectors:
      - app.kubernetes.io/name=grafana
  register: grafana_pods
  until: >
    grafana_pods.resources | length > 0 and
    (grafana_pods.resources | map(attribute='status.phase') | list | unique == ['Running'])
  retries: 30
  delay: 10
  when: prometheus_deploy is changed

- name: Get Grafana admin password
  kubernetes.core.k8s_info:
    kind: Secret
    name: prometheus-grafana
    namespace: monitoring
  register: grafana_secret
  when: prometheus_deploy is changed

- name: Display Grafana admin password
  debug:
    msg: "Grafana admin password: {{ grafana_secret.resources[0].data.admin_password | b64decode }}"
  when: prometheus_deploy is changed and grafana_secret.resources | length > 0
---
- name: Check if k3s is already installed
  stat:
    path: /usr/local/bin/k3s
  register: k3s_binary

- name: Download k3s install script
  get_url:
    url: https://get.k3s.io
    dest: /tmp/k3s_install.sh
    mode: '0755'
  when: not k3s_binary.stat.exists
  tags:
    - k3s
    - k3s:install

- name: Install k3s server
  command:
    cmd: /tmp/k3s_install.sh server
  environment:
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
    K3S_TOKEN: "{{ k3s_token }}"
    INSTALL_K3S_EXEC: "{{ k3s_server_args }}"
  when: 
    - not k3s_binary.stat.exists
    - inventory_hostname == groups['k3s_cluster'][0]
  notify: Restart k3s
  tags:
    - k3s
    - k3s:install

- name: Install k3s agent
  command:
    cmd: /tmp/k3s_install.sh agent
  environment:
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
    K3S_TOKEN: "{{ k3s_token }}"
    K3S_URL: "https://{{ k3s_api_server }}:6443"
  when:
    - not k3s_binary.stat.exists
    - inventory_hostname != groups['k3s_cluster'][0]
  notify: Restart k3s
  tags:
    - k3s
    - k3s:install

- name: Ensure k3s service is enabled and started
  systemd:
    name: k3s
    enabled: yes
    state: started
  tags:
    - k3s
    - k3s:service

- name: Get kubeconfig from primary node
  slurp:
    src: /etc/rancher/k3s/k3s.yaml
  register: k3s_kubeconfig
  when: inventory_hostname == groups['k3s_cluster'][0]
  tags:
    - k3s
    - k3s:config

- name: Check if local kubeconfig exists
  stat:
    path: "{{ playbook_dir }}/../k3s-kubeconfig.yaml"
  delegate_to: localhost
  register: local_kubeconfig
  when: inventory_hostname == groups['k3s_cluster'][0]
  tags:
    - k3s
    - k3s:config

- name: Store kubeconfig locally
  copy:
    content: "{{ k3s_kubeconfig['content'] | b64decode | replace('127.0.0.1', hostvars[groups['k3s_cluster'][0]]['ansible_host']) }}"
    dest: "{{ playbook_dir }}/../k3s-kubeconfig.yaml"
  delegate_to: localhost
  when: 
    - inventory_hostname == groups['k3s_cluster'][0]
    - not local_kubeconfig.stat.exists
  tags:
    - k3s
    - k3s:config

- name: Ensure .kube directory exists
  file:
    path: "~/.kube"
    state: directory
    mode: '0755'

- name: Copy kubeconfig to ~/.kube/config
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "~/.kube/config"
    remote_src: yes
    mode: '0600'

- name: Set KUBECONFIG environment variable
  lineinfile:
    path: ~/.bashrc
    line: 'export KUBECONFIG=~/.kube/config'
    create: yes
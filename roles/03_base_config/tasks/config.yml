---
# Purpose: Base server configuration for security, system settings, and general hardening
# This file configures essential system settings for all nodes in the cluster


# System Package Management
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  tags:
    - packages
    - system

- name: Upgrade all packages for security
  ansible.builtin.apt:
    upgrade: true
    update_cache: true
  when: perform_full_upgrade | default(false)
  register: package_upgrade
  tags:
    - packages
    - security

- name: Install required packages
  ansible.builtin.apt:
    name:
      - curl
      - apt-transport-https
      - ca-certificates
      - software-properties-common
      - fail2ban
      - ufw
      - python3-kubernetes
      - python3-yaml
      - python3-venv
      - apparmor
      - apparmor-utils
      - unattended-upgrades
      - auditd
      - htop
      - iotop
      - tcpdump
    state: present
    install_recommends: false  # Minimize installation footprint
  register: package_install
  tags:
    - packages
    - system

# Time Synchronization
- name: Set timezone
  community.general.timezone:
    name: "{{ timezone }}"
  tags:
    - time
    - system

- name: Install chrony
  ansible.builtin.apt:
    name: chrony
    state: present

- name: Enable and start chrony service
  ansible.builtin.systemd:
    name: chronyd
    state: started
    enabled: true

# SSH

- name: Disable password authentication
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication no'
  notify: Restart ssh

- name: Disable root login
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PermitRootLogin'
    line: 'PermitRootLogin no'
  notify: Restart ssh

- name: Set SSH idle timeout
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?ClientAliveInterval'
    line: 'ClientAliveInterval 300'
  notify: Restart ssh

- name: Set SSH client alive count max
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?ClientAliveCountMax'
    line: 'ClientAliveCountMax 3'
  notify: Restart ssh

- name: Configure multipath
  ansible.builtin.blockinfile:
    path: /etc/multipath.conf
    block: |
      blacklist {
          devnode "^sd[a-z0-9]+"
      }
  notify: Restart multipathd

# System Security Hardening
- name: Configure fail2ban
  ansible.builtin.blockinfile:
    path: /etc/fail2ban/jail.local
    create: true
    mode: '0644'
    block: |
      [DEFAULT]
      bantime = 1h
      findtime = 10m
      maxretry = 5

      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3
      bantime = 3h
  notify: Restart fail2ban

- name: Enable fail2ban
  ansible.builtin.service:
    name: fail2ban
    state: started
    enabled: true

- name: Configure automatic security updates
  ansible.builtin.template:
    src: 20auto-upgrades.j2
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    mode: '0644'
    owner: root
    group: root

- name: Configure unattended-upgrades for security
  ansible.builtin.blockinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    create: true
    block: |
      Unattended-Upgrade::Allowed-Origins {
        "${distro_id}:${distro_codename}";
        "${distro_id}:${distro_codename}-security";
        "${distro_id}ESMApps:${distro_codename}-apps-security";
        "${distro_id}ESM:${distro_codename}-infra-security";
      };
      Unattended-Upgrade::Package-Blacklist {};
      Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
      Unattended-Upgrade::Remove-Unused-Dependencies "true";
      Unattended-Upgrade::Automatic-Reboot "false";
      Unattended-Upgrade::Automatic-Reboot-Time "02:00";

- name: Harden sysctl settings
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
  loop:
    - { key: "net.ipv4.conf.all.accept_redirects", value: "0" }
    - { key: "net.ipv4.conf.all.send_redirects", value: "0" }
    - { key: "net.ipv4.conf.all.accept_source_route", value: "0" }
    - { key: "net.ipv4.conf.all.log_martians", value: "1" }


- name: Get current hostname
  ansible.builtin.command: hostname
  register: current_hostname
  changed_when: false

- name: Set hostname facts
  ansible.builtin.set_fact:
    hostname_needs_update: "{{ current_hostname.stdout != inventory_hostname }}"

- name: Configure hostname
  when: hostname_needs_update
  block:
    - name: Set system hostname (hostnamectl)
      ansible.builtin.command: hostnamectl set-hostname {{ inventory_hostname }}
      changed_when: true

    - name: Update /etc/hostname
      ansible.builtin.copy:
        content: "{{ inventory_hostname }}\n"
        dest: /etc/hostname
        mode: '0644'

    - name: Update /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "^127.0.1.1"
        line: "127.0.1.1 {{ inventory_hostname }}"
        state: present

    - name: Update hostname without reboot
      ansible.builtin.shell: |
        hostname {{ inventory_hostname }}
        systemctl restart systemd-hostnamed
        systemctl restart systemd-networkd || true
        systemctl restart NetworkManager || true
      changed_when: true

    - name: Verify hostname change
      ansible.builtin.command: hostname
      register: hostname_check
      changed_when: false
      failed_when: hostname_check.stdout != inventory_hostname

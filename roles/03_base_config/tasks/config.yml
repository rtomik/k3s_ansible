---
# Packages

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600

- name: Upgrade all packages
  apt:
    upgrade: true
  when: perform_full_upgrade | default(false)

- name: Install required packages
  apt:
    name:
      - curl
      - apt-transport-https
      - ca-certificates
      - software-properties-common
      - fail2ban
      - ufw
      - python3-kubernetes
      - python3-yaml
      - python3-venv
    state: present

# Time

- name: Set timezone
  community.general.timezone:
    name: "{{ timezone }}"

- name: Install chrony
  ansible.builtin.apt:
    name: chrony
    state: present

- name: Configure chrony
  template:
    src: chrony.conf.j2
    dest: /etc/chrony/chrony.conf
    mode: '0644'
  notify: Restart chrony

- name: Enable and start chrony service
  ansible.builtin.systemd:
    name: chronyd
    state: started
    enabled: true

- name: Ensure system clock is synchronized
  ansible.builtin.command: chronyc makestep
  changed_when: false

# SSH

- name: Disable password authentication
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication no'
  notify: Restart ssh

- name: Disable root login
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PermitRootLogin'
    line: 'PermitRootLogin no'
  notify: Restart ssh

- name: Set SSH idle timeout
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?ClientAliveInterval'
    line: 'ClientAliveInterval 300'
  notify: Restart ssh

- name: Set SSH client alive count max
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?ClientAliveCountMax'
    line: 'ClientAliveCountMax 3'
  notify: Restart ssh


- name: Enable fail2ban
  ansible.builtin.service:
    name: fail2ban
    state: started
    enabled: true

- name: Set up automatic security updates
  apt:
    name: unattended-upgrades
    state: present

- name: Configure automatic security updates
  template:
    src: 20auto-upgrades.j2
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    mode: '0644'

- name: Disable IPv6
  sysctl:
    name: net.ipv6.conf.all.disable_ipv6
    value: '1'
    state: present
  when: disable_ipv6 | default(false)

- name: Harden sysctl settings
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
  loop:
    - { key: "net.ipv4.conf.all.accept_redirects", value: "0" }
    - { key: "net.ipv4.conf.all.send_redirects", value: "0" }
    - { key: "net.ipv4.conf.all.accept_source_route", value: "0" }
    - { key: "net.ipv4.conf.all.log_martians", value: "1" }


- name: Get current hostname
  ansible.builtin.command: hostname
  register: current_hostname
  changed_when: false

- name: Set hostname facts
  ansible.builtin.set_fact:
    hostname_needs_update: "{{ current_hostname.stdout != inventory_hostname }}"

- name: Configure hostname
  when: hostname_needs_update
  block:
    - name: Set system hostname (hostnamectl)
      ansible.builtin.command: hostnamectl set-hostname {{ inventory_hostname }}
      changed_when: true

    - name: Update /etc/hostname
      ansible.builtin.copy:
        content: "{{ inventory_hostname }}\n"
        dest: /etc/hostname
        mode: '0644'

    - name: Update /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "^127.0.1.1"
        line: "127.0.1.1 {{ inventory_hostname }}"
        state: present

    - name: Update hostname without reboot
      ansible.builtin.shell: |
        hostname {{ inventory_hostname }}
        systemctl restart systemd-hostnamed
        systemctl restart systemd-networkd || true
        systemctl restart NetworkManager || true
      changed_when: true

    - name: Verify hostname change
      ansible.builtin.command: hostname
      register: hostname_check
      changed_when: false
      failed_when: hostname_check.stdout != inventory_hostname

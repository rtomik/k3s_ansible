---
- name: Deploy ArgoCD
  block:
    - name: Check if ArgoCD is already installed
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: argocd-server
        namespace: argocd
      register: argocd_check
      ignore_errors: true

    - name: Fetch ArgoCD Helm chart information
      kubernetes.core.helm_info:
        name: argocd
        release_namespace: argocd
      register: argocd_helm_info
      ignore_errors: true

    - name: Deploy or upgrade ArgoCD
      kubernetes.core.helm:
        name: argocd
        chart_ref: argo/argo-cd
        chart_version: "{{ argocd_version }}"
        release_namespace: argocd
        create_namespace: true
        values: "{{ lookup('template', 'values-argocd.yml.j2') | from_yaml }}"
        wait: true
        wait_timeout: 10m
      register: argocd_deploy
      until: argocd_deploy is succeeded
      retries: 3
      delay: 10

    - name: Wait for ArgoCD to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: argocd
        label_selectors:
          - app.kubernetes.io/name=argocd-server
      register: argocd_pods
      until: >
        argocd_pods.resources | length > 0 and
        (argocd_pods.resources | map(attribute='status.phase') | list | unique == ['Running'])
      retries: 20
      delay: 30
      when: argocd_deploy is changed

- name: Get git api token
  block:
    - name: Get Gitea API token from secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: gitea-api-token
        namespace: argocd
      register: gitea_token_secret

    - name: Set API token fact
      ansible.builtin.set_fact:
        gitea_api_token: "{{ gitea_token_secret.resources[0].data.api_token | b64decode }}"
      no_log: true
      when: gitea_token_secret.resources is defined and gitea_token_secret.resources | length > 0

    - name: Verify API token was retrieved
      ansible.builtin.fail:
        msg: "Failed to retrieve Gitea API token from Kubernetes secret"
      when: gitea_api_token is not defined or gitea_api_token | length == 0

- name: Install ArgoCD cli
  block:
    - name: Check if ArgoCD CLI is already installed
      ansible.builtin.command: which argocd
      register: argocd_cli_check
      changed_when: false
      failed_when: false

    - name: Get installed ArgoCD CLI version
      ansible.builtin.command: argocd version --client
      register: argocd_current_version
      changed_when: false
      failed_when: false
      when: argocd_cli_check.rc == 0

    - name: Get latest ArgoCD version
      ansible.builtin.shell: |
        curl --silent "https://api.github.com/repos/argoproj/argo-cd/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/'
      register: argocd_latest_version
      changed_when: false
      # Remove the condition so it always gets the latest version

    - name: Download and install ArgoCD CLI
      ansible.builtin.shell: |
        ARGOCD_VERSION="{{ argocd_latest_version.stdout }}"
        curl -sSL -o /tmp/argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_VERSION}/argocd-linux-amd64
        chmod +x /tmp/argocd-linux-amd64
        sudo mv /tmp/argocd-linux-amd64 /usr/local/bin/argocd
      when: >
        argocd_cli_check.rc != 0 or
        (argocd_current_version.rc == 0 and argocd_latest_version.stdout not in argocd_current_version.stdout)

- name: Connect ArgoCD to git repo
  block:
      # Configure ArgoCD with Git repository access
    - name: Get ArgoCD admin password
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: argocd-initial-admin-secret
        namespace: argocd
      register: argocd_admin_secret

    - name: Set ArgoCD admin password fact
      ansible.builtin.set_fact:
        argocd_admin_password: "{{ argocd_admin_secret.resources[0].data.password | b64decode }}"
      no_log: true
      when: argocd_admin_secret.resources is defined and argocd_admin_secret.resources | length > 0

    - name: Login to ArgoCD
      ansible.builtin.shell: |
        argocd login argocd.{{ domain }} \
          --username admin \
          --password {{ argocd_admin_password }} \
          --insecure
      environment:
        ARGOCD_SERVER: "argocd.{{ domain }}"
      register: argocd_login
      changed_when: argocd_login.rc == 0
      failed_when: argocd_login.rc != 0
      no_log: true

    - name: Configure Git repository in ArgoCD
      ansible.builtin.shell: |
        argocd repo add https://git.{{ domain }}/{{ git_organization_name }}/{{ git_repo_name }}.git \
          --username admin \
          --password {{ gitea_api_token }} \
          --insecure
      environment:
        ARGOCD_SERVER: "argocd.{{ domain }}"
      register: argocd_repo_add
      changed_when: argocd_repo_add.rc == 0
      failed_when: argocd_repo_add.rc != 0 and "already exists" not in argocd_repo_add.stderr
      no_log: true

- name: Deploy infrastructure apps via GitOps
  vars:
    app_definitions:
      kube-prometheus-stack:
        enabled: "{{ deploy_prometheus | default(false) }}"
        chart_name: "kube-prometheus-stack"
        version: "{{ prometheus_stack_version }}"
        repo: "https://prometheus-community.github.io/helm-charts"
        namespace: "monitoring"
        skip_crds: "true"
      prometheus-operator-crds:
        enabled: "{{ deploy_prometheus | default(false) }}"
        chart_name: "prometheus-operator-crds"
        version: "{{ prometheus_crds_version }}"
        repo: "https://prometheus-community.github.io/helm-charts"
        namespace: "monitoring"
        server_side: "true"
      grafana:
        enabled: "{{ deploy_grafana | default(false) }}"
        chart_name: "grafana"
        version: "{{ grafana_version }}"
        repo: "https://grafana.github.io/helm-charts"
        namespace: "monitoring"
      loki:
        enabled: "{{ deploy_loki | default(false) }}"
        chart_name: "loki"
        version: "{{ loki_version }}"
        repo: "https://grafana.github.io/helm-charts"
        namespace: "monitoring"
      promtail:
        enabled: "{{ deploy_loki | default(false) }}"
        chart_name: "promtail"
        version: "{{ promtail_version }}"
        repo: "https://grafana.github.io/helm-charts"
        namespace: "monitoring"

    # Filter for enabled apps only
    enabled_apps: "{{ app_definitions | dict2items |
                    selectattr('value.enabled', 'boolean') |
                    list }}"

    # Generate base directories
    base_directories:
      - argocd-apps

    # Generate app directories dynamically
    app_directories: "{{ enabled_apps | map(attribute='key') |
                        map('regex_replace', '^(.*)$', 'apps/\\1') | list }}"

    # Combined directory list
    directories: "{{ base_directories + app_directories }}"
  block:
    - name: Display enabled apps for deployment
      ansible.builtin.debug:
        msg: "Deploying the following apps: {{ enabled_apps | map(attribute='key') | join(', ') }}"

    - name: Create temporary directory for Git operations
      ansible.builtin.tempfile:
        state: directory
        suffix: -gitops
      register: git_temp_dir

    - name: Clone GitLab repository
      ansible.builtin.git:
        repo: "https://admin:{{ gitea_api_token | urlencode }}@git.{{ domain }}/{{ git_organization_name }}/{{ git_repo_name }}.git"
        dest: "{{ git_temp_dir.path }}"
        force: true
      environment:
        GIT_SSL_NO_VERIFY: "true"
        GIT_TERMINAL_PROMPT: "0"

    - name: Create directory structure
      ansible.builtin.file:
        path: "{{ git_temp_dir.path }}/{{ item }}"
        state: directory
      loop: "{{ directories }}"

    - name: Create Chart.yaml files
      ansible.builtin.copy:
        dest: "{{ git_temp_dir.path }}/apps/{{ item.key }}/Chart.yaml"
        content: |
          apiVersion: v2
          name: {{ item.key }}
          description: Helm chart for {{ item.key }}
          type: application
          version: 0.0.0
          dependencies:
            - name: {{ item.value.chart_name }}
              version: {{ item.value.version }}
              repository: {{ item.value.repo }}
      loop: "{{ enabled_apps }}"

    - name: Create values.yaml files
      ansible.builtin.template:
        src: "values-{{ item.key }}.yml.j2"
        dest: "{{ git_temp_dir.path }}/apps/{{ item.key }}/values.yaml"
      loop: "{{ enabled_apps }}"

    - name: Create ArgoCD applications
      ansible.builtin.copy:
        dest: "{{ git_temp_dir.path }}/argocd-apps/{{ item.key }}.yaml"
        content: |
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: {{ item.key }}
            namespace: argocd
          spec:
            project: default
            destination:
              server: https://kubernetes.default.svc
              namespace: {{ item.value.namespace }}
            source:
              repoURL: https://git.{{ domain }}/{{ git_organization_name }}/{{ git_repo_name }}.git
              targetRevision: HEAD
              path: apps/{{ item.key }}
              helm:
                valueFiles:
                  - values.yaml
          {% if item.value.skip_crds is defined and item.value.skip_crds | bool %}
                skipCrds: true
          {% endif %}
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
          {% if item.value.server_side is defined and item.value.server_side | bool %}
                - ServerSideApply=true
          {% endif %}
      loop: "{{ enabled_apps }}"

    - name: Push to Git repo
      ansible.builtin.shell: |
        cd {{ git_temp_dir.path }}
        git config user.email "ansible@{{ domain }}"
        git config user.name "Ansible Automation"
        git add .
        git diff --cached --quiet || git commit -m "Deploy enabled apps: {{ enabled_apps | map(attribute='key') | join(', ') }}"
        git push
      environment:
        GIT_TERMINAL_PROMPT: 0
        GIT_USERNAME: "admin"
        GIT_PASSWORD: "{{ gitea_api_token }}"
      register: git_push
      failed_when: git_push.rc != 0 and "No changes to commit" not in git_push.stdout

    - name: Apply ArgoCD applications
      kubernetes.core.k8s:
        state: present
        namespace: argocd
        src: "{{ git_temp_dir.path }}/argocd-apps/{{ item.key }}.yaml"
      loop: "{{ enabled_apps }}"
  always:
    - name: Remove temporary directory
      ansible.builtin.file:
        path: "{{ git_temp_dir.path }}"
        state: absent
      when: git_temp_dir.path is defined
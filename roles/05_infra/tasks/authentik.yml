---
- name: Check if Authentik is already installed
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: authentik-server
    namespace: authentik
  register: authentik_check
  ignore_errors: true
  when: deploy_authentik | bool

- name: Fetch Authentik Helm chart information
  kubernetes.core.helm_info:
    name: authentik
    release_namespace: authentik
  register: authentik_helm_info
  ignore_errors: true
  when: deploy_authentik | bool

- name: Deploy or upgrade Authentik
  kubernetes.core.helm:
    name: authentik
    chart_ref: authentik/authentik
    chart_version: "{{ authentik_version }}"
    release_namespace: authentik
    create_namespace: true
    values: "{{ lookup('template', 'values-authentik.yml.j2') | from_yaml }}"
    wait: true
    wait_timeout: 5m
  register: authentik_deploy
  when: deploy_authentik | bool

- name: Add user credentials to secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: authentik-login
        namespace: authentik
      data:
        authentik_admin_user: "{{ email | b64encode }}"
        authentik_admin_pw: "{{ vault_authentik_user_password | b64encode }}"
        authentik_api_token: "{{ vault_authentik_api_token | b64encode }}"
  when: deploy_authentik | bool

- name: Get required variables from authentik to create application
  block:
    - name: Get flow identifiers via Authentik API
      ansible.builtin.uri:
        url: "https://authentik.{{ domain }}/api/v3/flows/instances/"
        method: GET
        headers:
          Authorization: "Bearer {{ vault_authentik_api_token }}"
          Content-Type: "application/json"
        return_content: true
      register: flow_instances_response
      until: flow_instances_response.status == 200
      retries: 10
      delay: 10
      changed_when: false
      failed_when: flow_instances_response.status not in [200]
      when: deploy_authentik | bool

    - name: Extract relevant flow IDs
      ansible.builtin.set_fact:
        default_authorization_flow_id: >-
          {{
            (flow_instances_response.json.results | selectattr('slug', 'equalto', 'default-provider-authorization-implicit-consent') | list | first).pk
          }}
        default_invalidation_flow_id: >-
          {{
            (flow_instances_response.json.results | selectattr('slug', 'equalto', 'default-provider-invalidation-flow') | list | first).pk
          }}
      when:
        - flow_instances_response.json.results is defined
        - flow_instances_response.json.results | length > 0
        - deploy_authentik | bool

    - name: Get OAuth2 scope mappings
      ansible.builtin.uri:
        url: "https://authentik.{{ domain }}/api/v3/propertymappings/provider/scope/"
        method: GET
        headers:
          Authorization: "Bearer {{ vault_authentik_api_token }}"
          Content-Type: "application/json"
          Accept: "application/json"
        return_content: true
        validate_certs: true
        status_code: [200]
      register: scope_mappings_response
      until: scope_mappings_response.status == 200
      retries: 6
      delay: 10
      changed_when: false
      failed_when:
        - scope_mappings_response.status != 200
        - scope_mappings_response.json.results | length == 0
      when: deploy_authentik | bool

    - name: Define required OAuth2 scopes
      ansible.builtin.set_fact:
        required_scopes:
          email: "goauthentik.io/providers/oauth2/scope-email"
          openid: "goauthentik.io/providers/oauth2/scope-openid"
          profile: "goauthentik.io/providers/oauth2/scope-profile"
      when: deploy_authentik | bool

    - name: Verify required OAuth2 scope mappings exist
      ansible.builtin.assert:
        that:
          - required_scopes.values() | difference(scope_mappings_response.json.results | map(attribute='managed') | list) | length == 0
        fail_msg: "One or more required OAuth2 scope mappings are missing in Authentik"
        success_msg: "All required OAuth2 scope mappings are present in Authentik"
      when: deploy_authentik | bool

    - name: Extract UUIDs for required OAuth2 scopes
      ansible.builtin.set_fact:
        scope_uuids: "{{ scope_uuids | default({}) | combine({ item.key: (scope_mappings_response.json.results | selectattr('managed', 'equalto', item.value) | map(attribute='pk') | first ) }) }}"
      loop: "{{ required_scopes | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      when: deploy_authentik | bool

    - name: Set individual scope UUID facts
      ansible.builtin.set_fact:
        email_scope_uuid: "{{ scope_uuids.email }}"
        openid_scope_uuid: "{{ scope_uuids.openid }}"
        profile_scope_uuid: "{{ scope_uuids.profile }}"
      when: deploy_authentik | bool

- name: Configure apps
  when: deploy_authentik | bool
  block:
    - name: Define application configurations
      ansible.builtin.set_fact:
        authentik_api_url: "https://authentik.{{ domain }}/api/v3"
        authentik_apps:
          - name: ArgoCD
            slug: argocd
            namespace: argocd
            deploy_condition: deploy_argocd | bool
            client_type: confidential
            redirect_uris:
              - matching_mode: strict
                url: "https://argocd.{{ domain }}/api/dex/callback"
              - matching_mode: strict
                url: "http://localhost:8085/auth/callback"
            meta_launch_url: "https://argocd.{{ domain }}/auth/login"
            open_in_new_tab: true
            secret_name: argocd-authentik-credentials
            sub_mode: null
            signing_key: true
            additional_config: []

          - name: Grafana
            slug: grafana
            namespace: monitoring
            deploy_condition: deploy_grafana | bool
            client_type: confidential
            redirect_uris:
              - matching_mode: regex
                url: "https://grafana.{{ domain }}/login/generic_oauth"
            meta_launch_url: "https://grafana.{{ domain }}/"
            open_in_new_tab: true
            secret_name: grafana-authentik-credentials
            sub_mode: null
            signing_key: false
            additional_config: []

          - name: Tandoor-Recipes
            slug: tandoor-recipes
            namespace: tandoor
            deploy_condition: deploy_tandoor | bool
            client_type: confidential
            redirect_uris:
              - matching_mode: strict
                url: "https://recipes.{{ domain }}/accounts/authentik/login/callback/"
            meta_launch_url: "https://recipes.{{ domain }}/"
            open_in_new_tab: true
            secret_name: tandoor-authentik-credentials
            sub_mode: user_email
            signing_key: false
            additional_config: []

          - name: Gitea
            slug: gitea
            namespace: gitea
            deploy_condition: deploy_gitea | bool
            client_type: confidential
            redirect_uris:
              - matching_mode: strict
                url: "https://git.{{ domain }}/user/oauth2/authentik/callback"
            meta_launch_url: "https://git.{{ domain }}/"
            open_in_new_tab: true
            secret_name: gitea-authentik-secret
            sub_mode: user_email
            signing_key: false
            additional_config:
              - name: gitea-authentik-secret
                type: Opaque
                format: stringData
                template_type: gitea

          - name: Donetick
            slug: donetick
            namespace: donetick
            deploy_condition: deploy_donetick | bool
            client_type: confidential
            redirect_uris:
              - matching_mode: strict
                url: "https://donetick.{{ domain }}/auth/oauth2"
            meta_launch_url: "https://donetick.{{ domain }}/"
            open_in_new_tab: true
            secret_name: donetick-authentik-credentials
            sub_mode: user_email
            signing_key: false
            additional_config: []

          - name: Jellyfin
            slug: jellyfin
            namespace: jellyfin
            deploy_condition: deploy_jellyfin | bool
            client_type: confidential
            redirect_uris:
              - matching_mode: strict
                url: "https://jellyfin.{{ domain }}/sso/OID/redirect/authentik"
            meta_launch_url: "https://jellyfin.{{ domain }}/sso/OID/start/authentik"
            open_in_new_tab: true
            secret_name: jellyfin-authentik-credentials
            sub_mode: user_email
            signing_key: true
            additional_config: []

    - name: Handle signing key requirements
      when: authentik_apps | selectattr('signing_key', 'equalto', true) | list | length > 0
      block:
        - name: Get existing certificate key pairs from Authentik
          ansible.builtin.uri:
            url: "{{ authentik_api_url }}/crypto/certificatekeypairs/"
            method: GET
            headers:
              Authorization: "Bearer {{ vault_authentik_api_token }}"
              Content-Type: "application/json"
            return_content: true
          register: existing_cert_keypairs
          until: existing_cert_keypairs.status == 200
          retries: 3
          delay: 10

        - name: Set existing signing key fact if exists
          ansible.builtin.set_fact:
            signing_key_pk: >-
              {{
                existing_cert_keypairs.json.results
                | selectattr('name', 'equalto', 'ArgoCD Signing Key')
                | list | first | default(None)
              }}

        - name: Create a signing key in Authentik if not already present
          ansible.builtin.uri:
            url: "{{ authentik_api_url }}/crypto/certificatekeypairs/generate/"
            method: POST
            headers:
              Authorization: "Bearer {{ vault_authentik_api_token }}"
              Content-Type: "application/json"
            body:
              common_name: "ArgoCD Signing Key"
              validity_days: 5000
              alg: "rsa"
            body_format: json
          register: create_signing_key_response
          when: signing_key_pk is none

        - name: Re-fetch certificate key pairs from Authentik after creation
          ansible.builtin.uri:
            url: "{{ authentik_api_url }}/crypto/certificatekeypairs/"
            method: GET
            headers:
              Authorization: "Bearer {{ vault_authentik_api_token }}"
              Content-Type: "application/json"
            return_content: true
          register: keypairs_response
          when: signing_key_pk is none

        - name: Set signing key UID fact
          ansible.builtin.set_fact:
            signing_key_uid: >-
              {{
                (keypairs_response.json.results if signing_key_pk is none else existing_cert_keypairs.json.results)
                | selectattr('name', 'equalto', 'ArgoCD Signing Key')
                | list | first | default({}) | json_query('pk')
              }}

    - name: Filter active applications
      ansible.builtin.set_fact:
        active_apps: "{{ authentik_apps | selectattr('deploy_condition', 'defined') | selectattr('deploy_condition') | list }}"

    # Process each application one by one with a different approach to avoid file creation
    - name: Process each application
      ansible.builtin.include_tasks:
        file: authentik_process_app.yml
      vars:
        app: "{{ item }}"
      loop: "{{ active_apps }}"
      loop_control:
        label: "{{ item.name }}"

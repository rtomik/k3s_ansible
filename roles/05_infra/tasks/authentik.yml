---
- name: Check if Authentik is already installed
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: authentik-server
    namespace: authentik
  register: authentik_check
  ignore_errors: true
  when: deploy_authentik | bool

- name: Fetch Authentik Helm chart information
  kubernetes.core.helm_info:
    name: authentik
    release_namespace: authentik
  register: authentik_helm_info
  ignore_errors: true
  when: deploy_authentik | bool

- name: Deploy or upgrade Authentik
  kubernetes.core.helm:
    name: authentik
    chart_ref: authentik/authentik
    chart_version: "{{ authentik_version }}"
    release_namespace: authentik
    create_namespace: yes
    values: "{{ lookup('template', 'values-authentik.yml.j2') | from_yaml }}"
    wait: yes
    wait_timeout: 5m
  register: authentik_deploy
  when: deploy_authentik | bool

- name: Add user credentials to secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: authentik-login
        namespace: authentik
      data:
        authentik_admin_user: "{{ email | b64encode }}"
        authentik_admin_pw: "{{ vault_authentik_user_password | b64encode }}"
        authentik_api_token: "{{ vault_authentik_api_token | b64encode }}"
  when: deploy_authentik | bool

- name: Authentik ArgoCD
  block:
    - name: Create an OAuth2 provider for ArgoCD in Authentik
      uri:
        url: "https://authentik.{{ domain }}/api/v3/providers/oauth2/"
        method: POST
        headers:
          Authorization: "Bearer {{ vault_authentik_api_token }}"
          Content-Type: "application/json"
        body: |
          {
            "name": "ArgoCD",
            "slug": "ArgoCD",
            "client_type": "confidential",
            "authorization_flow": "implicit",
            "redirect_uris": ["https://argocd.{{ domain }}/auth/callback"],
            "client_id": "argocd-client-id",
            "client_secret": "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
          }
        body_format: json
      register: create_app_response

    - name: Create an ArgoCD application in Authentik
      uri:
        url: "https://authentik.{{ domain }}/api/v3/core/applications/"
        method: POST
        headers:
          Authorization: "Bearer {{ vault_authentik_api_token }}"
          Content-Type: "application/json"
        body: |
          {
            "name": "ArgoCD",
            "slug": "ArgoCD",
            "provider": "saml",
            "sso_url": "https://argocd.{{ domain }}",
            "open_in_new_tab": true,
          }
        body_format: json
      register: create_app_response

    - name: Debug application creation response
      debug:
        var: create_app_response.json
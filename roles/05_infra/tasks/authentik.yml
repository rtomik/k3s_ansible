---
- name: Check if Authentik is already installed
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: authentik-server
    namespace: authentik
  register: authentik_check
  ignore_errors: true
  when: deploy_authentik | bool

- name: Fetch Authentik Helm chart information
  kubernetes.core.helm_info:
    name: authentik
    release_namespace: authentik
  register: authentik_helm_info
  ignore_errors: true
  when: deploy_authentik | bool

- name: Deploy or upgrade Authentik
  kubernetes.core.helm:
    name: authentik
    chart_ref: authentik/authentik
    chart_version: "{{ authentik_version }}"
    release_namespace: authentik
    create_namespace: yes
    values: "{{ lookup('template', 'values-authentik.yml.j2') | from_yaml }}"
    wait: yes
    wait_timeout: 5m
  register: authentik_deploy
  when: deploy_authentik | bool

- name: Add user credentials to secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: authentik-login
        namespace: authentik
      data:
        authentik_admin_user: "{{ email | b64encode }}"
        authentik_admin_pw: "{{ vault_authentik_user_password | b64encode }}"
        authentik_api_token: "{{ vault_authentik_api_token | b64encode }}"
  when: deploy_authentik | bool

- name: Get flow identifiers via Authentik API
  uri:
    url: "https://authentik.{{ domain }}/api/v3/flows/instances/"
    method: GET
    headers:
      Authorization: "Bearer {{ vault_authentik_api_token }}"
      Content-Type: "application/json"
    return_content: yes
  register: flow_instances_response
  changed_when: false
  failed_when: flow_instances_response.status not in [200]
  when: deploy_authentik | bool

- name: Extract relevant flow IDs
  set_fact:
    default_authorization_flow_id: >-
      {{
        (flow_instances_response.json.results | selectattr('slug', 'equalto', 'default-provider-authorization-implicit-consent') | list | first).pk
      }}
    default_invalidation_flow_id: >-
      {{
        (flow_instances_response.json.results | selectattr('slug', 'equalto', 'default-provider-invalidation-flow') | list | first).pk
      }}
  when:
    - flow_instances_response.json.results is defined
    - flow_instances_response.json.results | length > 0
    - deploy_authentik | bool

- name: Authentik ArgoCD
  block:
    - name: Check if OAuth2 Provider for ArgoCD exists
      uri:
        url: "https://authentik.{{ domain }}/api/v3/providers/oauth2/?slug=Provider%20for%20ArgoCD"
        method: GET
        headers:
          Authorization: "Bearer {{ vault_authentik_api_token }}"
          Content-Type: "application/json"
        return_content: yes
      register: check_provider_response
      changed_when: false
      failed_when: check_provider_response.status not in [200, 404]
      when: deploy_authentik | bool

    - name: Create OAuth2 Provider for ArgoCD
      uri:
        url: "https://authentik.{{ domain }}/api/v3/providers/oauth2/"
        method: POST
        headers:
          Authorization: "Bearer {{ vault_authentik_api_token }}"
          Content-Type: "application/json"
        body: |
          {
            "name": "Provider for ArgoCD",
            "slug": "Provider for ArgoCD",
            "client_type": "confidential",
            "authorization_flow": "{{ default_authorization_flow_id }}",
            "invalidation_flow": "{{ default_invalidation_flow_id }}",
            "redirect_uris": [
              {
                "matching_mode": "strict",
                "url": "https://argocd.{{ domain }}"
              }
            ],
            "client_id": "argocd-client-id",
            "client_secret": "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
          }
        body_format: json
      register: create_provider_response
      changed_when: create_provider_response.status == 201
      failed_when: create_provider_response.status not in [200, 201]
      when:
        - deploy_authentik | bool
        - check_provider_response.status == 404

    - name: Save client credentials
      set_fact:
        argocd_client_id: >-
          {{
            (check_provider_response.json.results[0].client_id if check_provider_response.json.results | length > 0
              else create_provider_response.json.client_id)
          }}
        argocd_client_secret: >-
          {{
            (check_provider_response.json.results[0].client_secret if check_provider_response.json.results | length > 0
              else create_provider_response.json.client_secret)
          }}
        argocd_provider_id: >-
          {{
            (check_provider_response.json.results[0].pk if check_provider_response.json.results | length > 0
              else create_provider_response.json.pk)
          }}
      when: deploy_authentik | bool

    - name: Create an ArgoCD application in Authentik
      uri:
        url: "https://authentik.{{ domain }}/api/v3/core/applications/"
        method: POST
        headers:
          Authorization: "Bearer {{ vault_authentik_api_token }}"
          Content-Type: "application/json"
        body: |
          {
            "name": "ArgoCD",
            "slug": "ArgoCD",
            "provider": "{{ argocd_provider_id }}",
            "meta_launch_url": "https://argocd.{{ domain }}",
            "open_in_new_tab": true
          }
        body_format: json
      register: create_app_response
      changed_when: create_app_response.status == 201
      failed_when: create_app_response.status not in [200, 201]
      when: deploy_authentik | bool

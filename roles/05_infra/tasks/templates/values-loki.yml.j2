---
loki:
  deploymentMode: "{{ 'Scalable' if groups['master'] | length > 1 else 'SingleBinary' }}"

  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: "{{ [groups['master'] | length, 3] | min }}"
    
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: loki_index_
            period: 24h

    storage:
      type: filesystem
      filesystem:
        chunks_directory: /var/loki/chunks
        rules_directory: /var/loki/rules

    limits_config:
      ingestion_rate_mb: 32
      ingestion_burst_size_mb: 64
      max_global_streams_per_user: 5000
      max_query_length: 1440h  # 60 days
      retention_period: 1440h  # 60 days

  minio:
    enabled: "{{ groups['master'] | length > 1 }}"
    persistence:
      size: 20Gi
      storageClass: longhorn

  singleBinary:
    replicas: "{{ 1 if groups['master'] | length == 1 else 0 }}"
    persistence:
      enabled: true
      storageClass: longhorn
      size: 10Gi
      accessModes:
        - ReadWriteOnce

  # For multi-node setup, enable these components
  backend:
    replicas: "{{ 0 if groups['master'] | length == 1 else 1 }}"
  read:
    replicas: "{{ 0 if groups['master'] | length == 1 else [groups['master'] | length, 2] | min }}"
  write:
    replicas: "{{ 0 if groups['master'] | length == 1 else [groups['master'] | length, 2] | min }}"
  
  # Scale these components based on node count when in Scalable mode
  ingester:
    replicas: "{{ 0 if groups['master'] | length == 1 else [groups['master'] | length, 2] | min }}"
    persistence:
      enabled: true
      storageClass: longhorn
      size: 10Gi
  querier:
    replicas: "{{ 0 if groups['master'] | length == 1 else [groups['master'] | length, 2] | min }}"
  queryFrontend:
    replicas: "{{ 0 if groups['master'] | length == 1 else 1 }}"
  queryScheduler:
    replicas: "{{ 0 if groups['master'] | length == 1 else 1 }}"
  distributor:
    replicas: "{{ 0 if groups['master'] | length == 1 else [groups['master'] | length, 2] | min }}"
  compactor:
    replicas: "{{ 0 if groups['master'] | length == 1 else 1 }}"
  indexGateway:
    replicas: "{{ 0 if groups['master'] | length == 1 else 1 }}"
  bloomCompactor:
    replicas: "{{ 0 if groups['master'] | length == 1 else 1 }}"
  bloomGateway:
    replicas: "{{ 0 if groups['master'] | length == 1 else 1 }}"

  # Resource requests should scale with cluster size
  resources:
    requests:
      cpu: "{{ '100m' if groups['master'] | length == 1 else '200m' }}"
      memory: "{{ '256Mi' if groups['master'] | length == 1 else '512Mi' }}"
    limits:
      cpu: "{{ '1' if groups['master'] | length == 1 else '2' }}"
      memory: "{{ '1Gi' if groups['master'] | length == 1 else '2Gi' }}"
---
- name: Deploy Tandoor Recipe Manager
  block:
    - name: Generate secure passwords
      ansible.builtin.set_fact:
        tandoor_db_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters,digits') }}"
        tandoor_postgres_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters,digits') }}"
        tandoor_secret_key: "{{ lookup('password', '/dev/null length=50 chars=ascii_letters,digits') }}"
      no_log: true

    - name: Create Tandoor namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: tandoor
        state: present

    - name: Create Tandoor secrets
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: recipes
            namespace: tandoor
          type: Opaque
          stringData:
            postgresql-password: "{{ tandoor_db_password }}"
            postgresql-postgres-password: " {{ tandoor_postgres_password }}"
            secret-key: "{{ tandoor_secret_key }}"

- name: Set up GitOps for Tandoor
  when:
    - deploy_tandoor | default(false) | bool
    - gitlab_api_token is defined
  block:
    # 1. Get GitLab repository details
    - name: Get GitLab repository details
      ansible.builtin.uri:
        url: "https://gitlab.{{ domain }}/api/v4/projects/{{ gitlab_username }}%2F{{ gitlab_project_name | default('k3s-apps') }}"
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_api_token }}"
        status_code: [200, 404]
      register: gitlab_repo_check
      failed_when: false

    - name: Create ArgoCD repository credentials for GitLab
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: gitlab-repo-creds
            namespace: argocd
            labels:
              argocd.argoproj.io/secret-type: repository
          stringData:
            type: git
            url: "https://gitlab.{{ domain }}/{{ gitlab_username }}/{{ gitlab_project_name | default('k3s-apps') }}.git"
            username: "{{ gitlab_username }}"
            password: "{{ gitlab_api_token }}"

    - name: Set repository URL
      ansible.builtin.set_fact:
        gitlab_repo_id: "{{ gitlab_repo_check.json.id | default(0) }}"
        gitlab_repo_url: "{{ gitlab_repo_check.json.http_url_to_repo | default('') }}"
      when: gitlab_repo_check.status == 200

    # 2. Create repository only if it doesn't exist
    - name: Create GitLab repository
      ansible.builtin.uri:
        url: "https://gitlab.{{ domain }}/api/v4/projects"
        method: POST
        headers:
          PRIVATE-TOKEN: "{{ gitlab_api_token }}"
        body_format: json
        body:
          name: "{{ gitlab_project_name | default('k3s-apps') }}"
          path: "{{ gitlab_project_name | default('k3s-apps') }}"
          initialize_with_readme: true
        status_code: [201, 400]  # Accept 400 for "already exists"
      register: gitlab_repo_create
      when: gitlab_repo_check.status == 404
      failed_when: >
        gitlab_repo_create.status == 400 and
        'has already been taken' not in gitlab_repo_create.json.message.name|default([]) and
        'has already been taken' not in gitlab_repo_create.json.message.path|default([])

    # 3. Set repository details if newly created
    - name: Set repository URL if newly created
      ansible.builtin.set_fact:
        gitlab_repo_id: "{{ gitlab_repo_create.json.id }}"
        gitlab_repo_url: "{{ gitlab_repo_create.json.http_url_to_repo }}"
      when:
        - gitlab_repo_check.status == 404
        - gitlab_repo_create.status == 201

    # 4. Create temporary directory for Git operations
    - name: Create temporary directory for Git operations
      ansible.builtin.tempfile:
        state: directory
        suffix: -gitops
      register: git_temp_dir

    # 5. Use properly formatted Git URL with credentials for cloning
    - name: Clone GitLab repository
      ansible.builtin.git:
        repo: "https://{{ gitlab_username | urlencode }}:{{ gitlab_api_token | urlencode }}@gitlab.{{ domain }}/{{ gitlab_username }}/{{ gitlab_project_name | default('k3s-apps') }}.git"
        dest: "{{ git_temp_dir.path }}"
        force: true
      environment:
        GIT_SSL_NO_VERIFY: "true"  # Add if using self-signed certs
        GIT_TERMINAL_PROMPT: "0"

    # 3. Create directory structure
    - name: Create directory structure
      ansible.builtin.file:
        path: "{{ git_temp_dir.path }}/{{ item }}"
        state: directory
      with_items:
        - apps/tandoor/base
        - apps/tandoor/overlays/production/patches
        - argocd-apps

    # 4. Generate Kubernetes manifests
    - name: Generate Kubernetes manifests
      ansible.builtin.template:
        src: "tandoor/{{ item.src }}"
        dest: "{{ git_temp_dir.path }}/apps/tandoor/{{ item.dest }}"
      with_items:
        - { src: "base/namespace.yaml.j2", dest: "base/namespace.yaml" }
        - { src: "base/configmap.yaml.j2", dest: "base/configmap.yaml" }
        - { src: "base/db-statefulset.yaml.j2", dest: "base/db-statefulset.yaml" }
        - { src: "base/web-deployment.yaml.j2", dest: "base/web-deployment.yaml" }
        - { src: "base/db-service.yaml.j2", dest: "base/db-service.yaml" }
        - { src: "base/web-service.yaml.j2", dest: "base/web-service.yaml" }
        - { src: "base/pvc.yaml.j2", dest: "base/pvc.yaml" }
        - { src: "base/ingress.yaml.j2", dest: "base/ingress.yaml" }
        - { src: "base/kustomization.yaml.j2", dest: "base/kustomization.yaml" }
        - { src: "overlays/production/kustomization.yaml.j2", dest: "overlays/production/kustomization.yaml" }
        - { src: "overlays/production/patches/configmap-patch.yaml.j2", dest: "overlays/production/patches/configmap-patch.yaml" }

    - name: Generate ArgoCD application manifest
      ansible.builtin.template:
        src: tandoor/argocd-app.yaml.j2
        dest: "{{ git_temp_dir.path }}/argocd-apps/tandoor.yaml"

    # 5. Commit and push to GitLab
    - name: Commit changes to GitLab
      ansible.builtin.shell:
        cmd: |
          git config user.email "ansible-automation@{{ domain }}"
          git config user.name "Ansible Automation"
          git add .
          git commit -m "Add Tandoor Recipe Manager manifests" || echo "No changes to commit"
          git push
        chdir: "{{ git_temp_dir.path }}"
      environment:
        GIT_TERMINAL_PROMPT: 0
        GIT_USERNAME: "{{ gitlab_username }}"
        GIT_PASSWORD: "{{ gitlab_api_token }}"
      register: git_push
      failed_when: git_push.rc != 0 and "No changes to commit" not in git_push.stdout

    # 6. Register application in ArgoCD
    - name: Check if ArgoCD application exists
      kubernetes.core.k8s_info:
        kind: Application
        name: tandoor
        namespace: argocd
      register: argocd_app_check
      failed_when: false

    - name: Create ArgoCD application
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: tandoor
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: "https://gitlab.{{ domain }}/{{ gitlab_username }}/{{ gitlab_project_name | default('k3s-apps') }}.git"
              targetRevision: main
              path: apps/tandoor/overlays/production
            destination:
              server: https://kubernetes.default.svc
              namespace: tandoor
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true

    # 7. Clean up
    - name: Clean up temporary Git directory
      ansible.builtin.file:
        path: "{{ git_temp_dir.path }}"
        state: absent

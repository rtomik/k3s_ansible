---

- name: Get git api token
  block:
    - name: Get Gitea API token from secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: gitea-api-token
        namespace: argocd
      register: gitea_token_secret

    - name: Set API token fact
      ansible.builtin.set_fact:
        gitea_api_token: "{{ gitea_token_secret.resources[0].data.api_token | b64decode }}"
      no_log: true
      when: gitea_token_secret.resources is defined and gitea_token_secret.resources | length > 0

    - name: Verify API token was retrieved
      ansible.builtin.fail:
        msg: "Failed to retrieve Gitea API token from Kubernetes secret"
      when: gitea_api_token is not defined or gitea_api_token | length == 0

- name: Deploy apps via GitOps
  vars:
    apps:
      - name: "audiobookshelf"
        chart_name: "audiobookshelf"
        version: "0.0.1"
        repo: "https://gitlab.com/api/v4/projects/57546317/packages/helm/release"
        namespace: "audiobookshelf"
      - name: "open-webui"
        chart_name: "open-webui"
        version: "5.24.0"
        repo: "https://helm.openwebui.com/"
        namespace: "open-webui"
    directories:
      - argocd-apps
      - apps/audiobookshelf
      - apps/open-webui
  block:
    - name: Create temporary directory for Git operations
      ansible.builtin.tempfile:
        state: directory
        suffix: -gitops
      register: git_temp_dir

    - name: Clone GitLab repository
      ansible.builtin.git:
        repo: "https://admin:{{ gitea_api_token | urlencode }}@git.{{ domain }}/{{ git_organization_name }}/{{ git_repo_name }}.git"
        dest: "{{ git_temp_dir.path }}"
        force: true
      environment:
        GIT_SSL_NO_VERIFY: "true"
        GIT_TERMINAL_PROMPT: "0"

    - name: Create directory structure
      ansible.builtin.file:
        path: "{{ git_temp_dir.path }}/{{ item }}"
        state: directory
      loop: "{{ directories }}"

    - name: Create Chart.yaml files
      ansible.builtin.copy:
        dest: "{{ git_temp_dir.path }}/apps/{{ item.name }}/Chart.yaml"
        content: |
          apiVersion: v2
          name: {{ item.name }}
          description: Helm chart for {{ item.name }}
          type: application
          version: 0.0.0
          dependencies:
            - name: {{ item.chart_name }}
              version: {{ item.version }}
              repository: {{ item.repo }}
      loop: "{{ apps }}"

    - name: Create values.yaml files
      ansible.builtin.template:
        src: "values-{{ item.name }}.yml.j2"
        dest: "{{ git_temp_dir.path }}/apps/{{ item.name }}/values.yaml"
      loop: "{{ apps }}"

    - name: Create ArgoCD applications
      ansible.builtin.copy:
        dest: "{{ git_temp_dir.path }}/argocd-apps/{{ item.name }}.yaml"
        content: |
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: {{ item.name }}
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: https://git.{{ domain }}/{{ git_organization_name }}/{{ git_repo_name }}.git
              targetRevision: HEAD
              path: apps/{{ item.name }}
              helm:
                valueFiles:
                  - values.yaml
            destination:
              server: https://kubernetes.default.svc
              namespace: {{ item.namespace }}
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
      loop: "{{ apps }}"

    - name: Push to Git repo
      ansible.builtin.shell: |
        cd {{ git_temp_dir.path }}
        git config user.email "ansible@{{ domain }}"
        git config user.name "Ansible Automation"
        git add .
        git commit -m "Deploy apps by Ansible"
        git push
      environment:
        GIT_TERMINAL_PROMPT: 0
        GIT_USERNAME: "admin"
        GIT_PASSWORD: "{{ gitea_api_token }}"
      register: git_push
      failed_when: git_push.rc != 0 and "No changes to commit" not in git_push.stdout

    - name: Apply ArgoCD applications
      kubernetes.core.k8s:
        state: present
        namespace: argocd
        src: "{{ git_temp_dir.path }}/argocd-apps/{{ item.name }}.yaml"
      loop: "{{ apps }}"
  always:
    - name: Remove temporary directory
      ansible.builtin.file:
        path: "{{ git_temp_dir.path }}"
        state: absent
      when: git_temp_dir.path is defined
